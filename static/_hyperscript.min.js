(function (e, r) {
  if (typeof define === 'function' && define.amd) {
    define([], r);
  } else {
    e._hyperscript = r();
  }
})(typeof self !== 'undefined' ? self : this, function () {
  return (function () {
    'use strict';
    function o(e, r) {
      for (var t in r) {
        if (r.hasOwnProperty(t)) {
          e[t] = r[t];
        }
      }
      return e;
    }
    function r(e) {
      try {
        return JSON.parse(e);
      } catch (e) {
        t(e);
        return null;
      }
    }
    function t(e) {
      if (console.error) {
        console.error(e);
      } else if (console.log) {
        console.log('ERROR: ', e);
      }
    }
    function u(e, r) {
      return new (e.bind.apply(e, [e].concat(r)))();
    }
    var S =
      typeof self !== 'undefined'
        ? self
        : typeof global !== 'undefined'
        ? global
        : this;
    var L = (function () {
      var g = {
        '+': 'PLUS',
        '-': 'MINUS',
        '*': 'MULTIPLY',
        '/': 'DIVIDE',
        '.': 'PERIOD',
        '\\': 'BACKSLASH',
        ':': 'COLON',
        '%': 'PERCENT',
        '|': 'PIPE',
        '!': 'EXCLAMATION',
        '?': 'QUESTION',
        '#': 'POUND',
        '&': 'AMPERSAND',
        $: 'DOLLAR',
        ';': 'SEMI',
        ',': 'COMMA',
        '(': 'L_PAREN',
        ')': 'R_PAREN',
        '<': 'L_ANG',
        '>': 'R_ANG',
        '<=': 'LTE_ANG',
        '>=': 'GTE_ANG',
        '==': 'EQ',
        '===': 'EQQ',
        '!=': 'NEQ',
        '!==': 'NEQQ',
        '{': 'L_BRACE',
        '}': 'R_BRACE',
        '[': 'L_BRACKET',
        ']': 'R_BRACKET',
        '=': 'EQUALS',
      };
      function q(e) {
        return R(e) || b(e) || e === '-' || e === '_';
      }
      function O(e) {
        return R(e) || b(e) || e === '-' || e === '_' || e === ':';
      }
      function N(e) {
        return e === ' ' || e === '\t' || I(e);
      }
      function w(e) {
        return '[Line: ' + e.line + ', Column: ' + e.col + ']';
      }
      function I(e) {
        return e === '\r' || e === '\n';
      }
      function b(e) {
        return e >= '0' && e <= '9';
      }
      function R(e) {
        return (e >= 'a' && e <= 'z') || (e >= 'A' && e <= 'Z');
      }
      function A(e, r) {
        return e === '_' || (!r && e === '$');
      }
      function S(e) {
        return e === '`' || e === '^';
      }
      function L(a, r, e) {
        var n = true;
        l('WHITESPACE');
        function i(e, r) {
          C.raiseParseError(e, r);
        }
        function t(e) {
          var r = u(e);
          if (r) {
            return r;
          } else {
            i(this, "Expected '" + e + "' but found '" + E().value + "'");
          }
        }
        function o(e, r, t) {
          for (var n = 0; n < arguments.length; n++) {
            var a = arguments[n];
            var i = u(a);
            if (i) {
              return i;
            }
          }
        }
        function u(e) {
          if (E() && E().op && E().value === e) {
            return m();
          }
        }
        function s(e, r, t, n) {
          var a = l(e, r, t, n);
          if (a) {
            return a;
          } else {
            i(this, 'Expected one of ' + JSON.stringify([e, r, t]));
          }
        }
        function l(e, r, t, n) {
          if (E() && E().type && [e, r, t, n].indexOf(E().type) >= 0) {
            return m();
          }
        }
        function f(e, r) {
          var t = c(e, r);
          if (t) {
            return t;
          } else {
            i(this, "Expected '" + e + "' but found '" + E().value + "'");
          }
        }
        function c(e, r) {
          var r = r || 'IDENTIFIER';
          if (E() && E().value === e && E().type === r) {
            return m();
          }
        }
        function m() {
          var e = a.shift();
          r.push(e);
          if (n) {
            l('WHITESPACE');
          }
          return e;
        }
        function p(e, r) {
          var t = [];
          n = false;
          while (
            (r == null || E().type !== r) &&
            (e == null || E().value !== e) &&
            E().type !== 'EOF'
          ) {
            t.push(m());
          }
          n = true;
          return t;
        }
        function v() {
          return p(null, 'WHITESPACE');
        }
        function h() {
          return a.length > 0;
        }
        function d(e, r) {
          var t;
          var n = 0;
          while (e >= 0) {
            if (r) {
              do {
                t = a[n++];
              } while (t && t.type === 'WHITESPACE');
            } else {
              t = a[n];
            }
            e--;
          }
          if (t) {
            return t;
          } else {
            return { type: 'EOF', value: '<<<EOF>>>' };
          }
        }
        function E(e) {
          return d(0, e);
        }
        return {
          matchAnyOpToken: o,
          matchOpToken: u,
          requireOpToken: t,
          matchTokenType: l,
          requireTokenType: s,
          consumeToken: m,
          matchToken: c,
          requireToken: f,
          list: a,
          consumed: r,
          source: e,
          hasMore: h,
          currentToken: E,
          token: d,
          consumeUntil: p,
          consumeUntilWhitespace: v,
        };
      }
      function e(e, r) {
        var t = e;
        var n = [];
        var a = 0;
        var i = 0;
        var o = 1;
        var u = '<START>';
        while (a < t.length) {
          if (E() === '-' && T() === '-') {
            f();
          } else {
            if (N(E())) {
              n.push(x());
            } else if (!k() && E() === '.' && R(T())) {
              n.push(c());
            } else if (!k() && E() === '#' && R(T())) {
              n.push(m());
            } else if (R(E()) || A(E(), r)) {
              n.push(p());
            } else if (b(E())) {
              n.push(v());
            } else if (E() === '"' || E() === "'") {
              n.push(d());
            } else if (g[E()]) {
              n.push(h());
            } else if (S(E())) {
              n.push(l('RESERVED', E));
            } else {
              if (a < t.length) {
                throw Error('Unknown token: ' + E() + ' ');
              }
            }
          }
        }
        return L(n, [], t);
        function s(e, r) {
          var t = l(e, r);
          t.op = true;
          return t;
        }
        function l(e, r) {
          return {
            type: e,
            value: r,
            start: a,
            end: a + 1,
            column: i,
            line: o,
          };
        }
        function f() {
          while (E() && !I(E())) {
            y();
          }
          y();
        }
        function c() {
          var e = l('CLASS_REF');
          var r = y();
          while (q(E())) {
            r += y();
          }
          e.value = r;
          e.end = a;
          return e;
        }
        function m() {
          var e = l('ID_REF');
          var r = y();
          while (O(E())) {
            r += y();
          }
          e.value = r;
          e.end = a;
          return e;
        }
        function p() {
          var e = l('IDENTIFIER');
          var r = y();
          while (R(E()) || A(E())) {
            r += y();
          }
          e.value = r;
          e.end = a;
          return e;
        }
        function v() {
          var e = l('NUMBER');
          var r = y();
          while (b(E())) {
            r += y();
          }
          if (E() === '.') {
            r += y();
          }
          while (b(E())) {
            r += y();
          }
          e.value = r;
          e.end = a;
          return e;
        }
        function h() {
          var e = y();
          while (E() && g[e + E()]) {
            e += y();
          }
          var r = s(g[e], e);
          r.value = e;
          r.end = a;
          return r;
        }
        function d() {
          var e = l('STRING');
          var r = y();
          var t = '';
          while (E() && E() !== r) {
            if (E() === '\\') {
              y();
            }
            t += y();
          }
          if (E() !== r) {
            throw Error('Unterminated string at ' + w(e));
          } else {
            y();
          }
          e.value = t;
          e.end = a;
          return e;
        }
        function E() {
          return t.charAt(a);
        }
        function T() {
          return t.charAt(a + 1);
        }
        function y() {
          u = E();
          a++;
          i++;
          return u;
        }
        function k() {
          return R(u) || b(u) || u === ')' || u === '}' || u === ']';
        }
        function x() {
          var e = l('WHITESPACE');
          var r = '';
          while (E() && N(E())) {
            if (I(E())) {
              i = 0;
              o++;
            }
            r += y();
          }
          e.value = r;
          e.end = a;
          return e;
        }
      }
      return { tokenize: e, makeTokensObject: L };
    })();
    var C = (function () {
      var u = {};
      var o = {};
      var s = {};
      var a = [];
      var l = [];
      function i(e, r, t) {
        var n = u[e];
        if (n) return n(C, F, r, t);
      }
      function f(e, r, t, n) {
        var a = i(e, r, n);
        return a || v(r, t || 'Expected ' + e);
      }
      function c(e, r) {
        for (var t = 0; t < e.length; t++) {
          var n = e[t];
          var a = i(n, r);
          if (a) {
            return a;
          }
        }
      }
      function t(e, r) {
        u[e] = r;
      }
      function e(e, a) {
        var i = e + 'Command';
        var r = function (e, r, t) {
          var n = a(e, r, t);
          if (n) {
            n.type = i;
            n.execute = function (e) {
              return r.unifiedExec(this, e);
            };
            return n;
          }
        };
        u[i] = r;
        o[e] = r;
      }
      function r(a, i) {
        var o = a + 'Feature';
        var e = function (e, r, t) {
          var n = i(e, r, t);
          if (n) {
            n.keyword = a;
            n.type = o;
            return n;
          }
        };
        u[o] = e;
        s[a] = e;
      }
      function n(e, r) {
        a.push(e);
        t(e, r);
      }
      function m(e, r) {
        l.push(e);
        t(e, r);
      }
      t('feature', function (e, r, t) {
        var n = s[t.currentToken().value];
        if (n) {
          return n(e, r, t);
        }
      });
      t('command', function (e, r, t) {
        var n = o[t.currentToken().value];
        if (n) {
          return n(e, r, t);
        }
      });
      t('commandList', function (e, r, t) {
        var n = e.parseElement('command', t);
        if (n) {
          t.matchToken('then');
          n.next = e.parseElement('commandList', t);
          return n;
        }
      });
      t('leaf', function (e, r, t) {
        var n = c(a, t);
        if (n == null) {
          return i('symbol', t);
        } else {
          return n;
        }
      });
      t('indirectExpression', function (e, r, t, n) {
        for (var a = 0; a < l.length; a++) {
          var i = l[a];
          var o = e.parseElement(i, t, n);
          if (o) {
            return o;
          }
        }
        return n;
      });
      t('primaryExpression', function (e, r, t) {
        var n = e.parseElement('leaf', t);
        if (n) {
          return e.parseElement('indirectExpression', t, n);
        }
        e.raiseParseError(t, 'Unexpected value: ' + t.currentToken().value);
      });
      function p(e) {
        var r = e.currentToken();
        var t = e.source;
        var n = t.split('\n');
        var a = r ? r.line - 1 : n.length - 1;
        var i = n[a];
        var o = r ? r.column : i.length - 1;
        return i + '\n' + ' '.repeat(o) + '^^\n\n';
      }
      function v(e, r) {
        r =
          (r || 'Unexpected Token : ' + e.currentToken().value) + '\n\n' + p(e);
        var t = new Error(r);
        t.tokens = e;
        throw t;
      }
      function h(e) {
        return i('hyperscript', e);
      }
      function d(e, r) {
        if (e) {
          e.parent = r;
          d(e.next, r);
        }
      }
      function E(e) {
        if (
          e.value == 'end' ||
          e.value == 'then' ||
          e.value == 'else' ||
          o[e.value] ||
          s[e.value] ||
          e.type == 'EOF'
        ) {
          return true;
        }
      }
      function T(e) {
        var r = [''];
        do {
          if (e.currentToken().value === '$') {
            e.consumeToken();
            var t = e.matchOpToken('{');
            r.push(f('expression', e));
            if (t) {
              e.requireOpToken('}');
            }
            r.push('');
          } else if (e.currentToken().value === '\\') {
            e.consumeToken();
            e.consumeToken();
          } else {
            var n = e.consumeToken();
            r[r.length - 1] += n.value;
          }
        } while (e.hasMore());
        return r;
      }
      return {
        setParent: d,
        requireElement: f,
        parseElement: i,
        commandBoundary: E,
        parseAnyOf: c,
        parseHyperScript: h,
        raiseParseError: v,
        addGrammarElement: t,
        addCommand: e,
        addFeature: r,
        addLeafExpression: n,
        addIndirectExpression: m,
        parseStringTemplate: T,
      };
    })();
    var P = {
      dynamicResolvers: [],
      String: function (e) {
        if (e.toString) {
          return e.toString();
        } else {
          return '' + e;
        }
      },
      Int: function (e) {
        return parseInt(e);
      },
      Float: function (e) {
        return parseFloat(e);
      },
      Number: function (e) {
        return Number(e);
      },
      Date: function (e) {
        return Date(e);
      },
    };
    var F = (function () {
      function t(e, r) {
        var t =
          e.matches ||
          e.matchesSelector ||
          e.msMatchesSelector ||
          e.mozMatchesSelector ||
          e.webkitMatchesSelector ||
          e.oMatchesSelector;
        return t && t.call(e, r);
      }
      function i(e, r) {
        var t;
        if (window.CustomEvent && typeof window.CustomEvent === 'function') {
          t = new CustomEvent(e, {
            bubbles: true,
            cancelable: true,
            detail: r,
          });
        } else {
          t = document.createEvent('CustomEvent');
          t.initCustomEvent(e, true, true, r);
        }
        return t;
      }
      function o(e, r, t) {
        var t = t || {};
        t['sentBy'] = e;
        var n = i(r, t);
        var a = e.dispatchEvent(n);
        return a;
      }
      function u(e) {
        return Array.isArray(e) || e instanceof NodeList;
      }
      function n(e, r) {
        if (e == null) {
        } else if (u(e)) {
          for (var t = 0; t < e.length; t++) {
            r(e[t]);
          }
        } else {
          r(e);
        }
      }
      var s = { array_sentinel: true };
      function c(e) {
        var r = [];
        for (var t = 0; t < e.length; t++) {
          var n = e[t];
          if (Array.isArray(n)) {
            r.push(s);
            for (var a = 0; a < n.length; a++) {
              r.push(n[a]);
            }
            r.push(s);
          } else {
            r.push(n);
          }
        }
        return r;
      }
      function m(e) {
        var r = [];
        for (var t = 0; t < e.length; t++) {
          var n = e[t];
          if (n === s) {
            n = e[++t];
            var a = [];
            r.push(a);
            while (n !== s) {
              a.push(n);
              n = e[++t];
            }
          } else {
            r.push(n);
          }
        }
        return r;
      }
      function p(e) {
        for (var r = 0; r < e.length; r++) {
          var t = e[r];
          if (t.asyncWrapper) {
            e[r] = t.value;
          }
          if (Array.isArray(t)) {
            for (var n = 0; n < t.length; n++) {
              var a = t[n];
              if (a.asyncWrapper) {
                t[n] = a.value;
              }
            }
          }
        }
      }
      var a = { halt_flag: true };
      function v(r, t) {
        while (true) {
          try {
            var n = e(r, t);
          } catch (e) {
            F.registerHyperTrace(t, e);
            if (t.meta.errorHandler && !t.meta.handlingError) {
              t.meta.handlingError = true;
              t[t.meta.errorSymmbol] = e;
              r = t.meta.errorHandler;
              continue;
            } else if (t.meta.reject) {
              t.meta.reject(e);
              n = a;
            } else {
              throw e;
            }
          }
          if (n == null) {
            console.error(
              r,
              ' did not return a next element to execute! context: ',
              t
            );
            return;
          } else if (n.then) {
            n.then(function (e) {
              v(e, t);
            }).catch(function (e) {
              F.registerHyperTrace(t, e);
              if (t.meta.errorHandler && !t.meta.handlingError) {
                t.meta.handlingError = true;
                t[t.meta.errorSymmbol] = e;
                v(t.meta.errorHandler, t);
              } else if (t.meta.reject) {
                t.meta.reject(e);
              } else {
                throw e;
              }
            });
            return;
          } else if (n === a) {
            return;
          } else {
            r = n;
          }
        }
      }
      function e(a, r) {
        var e = false;
        var i = false;
        var o = [r];
        if (a.args) {
          for (var t = 0; t < a.args.length; t++) {
            var n = a.args[t];
            if (n == null) {
              o.push(null);
            } else if (Array.isArray(n)) {
              var u = [];
              for (var s = 0; s < n.length; s++) {
                var l = n[s];
                var f = l ? l.evaluate(r) : null;
                if (f) {
                  if (f.then) {
                    e = true;
                  } else if (f.asyncWrapper) {
                    i = true;
                  }
                }
                u.push(f);
              }
              o.push(u);
            } else if (n.evaluate) {
              var f = n.evaluate(r);
              if (f) {
                if (f.then) {
                  e = true;
                } else if (f.asyncWrapper) {
                  i = true;
                }
              }
              o.push(f);
            } else {
              o.push(n);
            }
          }
        }
        if (e) {
          return new Promise(function (t, n) {
            var e = c(o);
            Promise.all(e)
              .then(function (e) {
                e = m(e);
                if (i) {
                  p(e);
                }
                try {
                  var r = a.op.apply(a, e);
                  t(r);
                } catch (e) {
                  n(e);
                }
              })
              .catch(function (e) {
                if (r.meta.errorHandler && !r.meta.handlingError) {
                  r.meta.handlingError = true;
                  r[r.meta.errorSymmbol] = e;
                  v(r.meta.errorHandler, r);
                } else if (r.meta.reject) {
                  r.meta.reject(e);
                } else {
                }
              });
          });
        } else {
          if (i) {
            p(o);
          }
          return a.op.apply(a, o);
        }
      }
      var r = null;
      function l() {
        if (r == null) {
          r = _hyperscript.config.attributes.replace(/ /g, '').split(',');
        }
        return r;
      }
      function f(e) {
        for (var r = 0; r < l().length; r++) {
          var t = l()[r];
          if (e.hasAttribute && e.hasAttribute(t)) {
            return e.getAttribute(t);
          }
        }
        if (e.type === 'text/hyperscript') {
          return e.innerText;
        }
        return null;
      }
      function h(e, r, t, n) {
        var a = {
          meta: {
            parser: C,
            lexer: L,
            runtime: F,
            owner: e,
            feature: r,
            iterators: {},
          },
          me: t,
          event: n,
          target: n ? n.target : null,
          detail: n ? n.detail : null,
          body: 'document' in S ? document.body : null,
        };
        a.meta.ctx = a;
        return a;
      }
      function d() {
        return l()
          .map(function (e) {
            return '[' + e + ']';
          })
          .join(', ');
      }
      function E(e, r) {
        var t = P.dynamicResolvers;
        for (var n = 0; n < t.length; n++) {
          var a = t[n];
          var i = a(r, e);
          if (i !== undefined) {
            return i;
          }
        }
        if (e == null) {
          return null;
        }
        var o = P[r];
        if (o) {
          return o(e);
        }
        throw 'Unknown conversion : ' + r;
      }
      function T(e, r) {
        return Object.prototype.toString.call(e) === '[object ' + r + ']';
      }
      function y(e, r, t) {
        if (T(r, 'Object')) {
          var n = e;
          var a = r;
          var i = 'expression';
        } else if (T(r, 'String')) {
          var n = r;
          var i = e;
          var a = t;
        } else {
          var n = e;
          var a = {};
          var i = 'expression';
        }
        a = a || {};
        var o = C.parseElement(i, L.tokenize(n));
        return o.evaluate ? o.evaluate(a) : o.execute(a);
      }
      function k(e) {
        var r = F.getScriptSelector();
        if (t(e, r)) {
          x(e);
        }
        if (e.querySelectorAll) {
          n(e.querySelectorAll(r), function (e) {
            x(e);
          });
        }
        if (e.type === 'text/hyperscript') {
          x(e, document.body);
        }
        if (e.querySelectorAll) {
          n(e.querySelectorAll("[type='text/hyperscript']"), function (e) {
            x(e, document.body);
          });
        }
      }
      function x(r, e) {
        var t = g(r);
        if (!t.initialized) {
          var n = f(r);
          if (n) {
            try {
              t.initialized = true;
              t.script = n;
              var a = L.tokenize(n);
              var i = C.parseHyperScript(a);
              i.apply(e || r, r);
              setTimeout(function () {
                o(e || r, 'load');
              }, 1);
            } catch (e) {
              console.error(
                'hyperscript errors were found on the following element:',
                r,
                '\n\n',
                e.message,
                e.stack
              );
            }
          }
        }
      }
      function g(e) {
        var r = 'hyperscript-internal-data';
        var t = e[r];
        if (!t) {
          t = e[r] = {};
        }
        return t;
      }
      function q(e, r, t) {
        if (e == null && t) {
          return e;
        }
        var n = Object.prototype.toString.call(e).slice(8, -1);
        var a = e && n === r;
        if (a) {
          return e;
        } else {
          throw new Error(
            'Typecheck failed!  Expected: ' + r + ', Found: ' + n
          );
        }
      }
      function O(e, r) {
        if (e === 'me' || e === 'my' || e === 'I') {
          return r['me'];
        }
        if (e === 'it' || e === 'its') {
          return r['it'];
        } else {
          if (r.meta && r.meta.context) {
            var t = r.meta.context[e];
            if (typeof t !== 'undefined') {
              return t;
            }
          }
          var n = r[e];
          if (typeof n !== 'undefined') {
            return n;
          } else {
            return S[e];
          }
        }
      }
      function N(e, r) {
        if (e) {
          if (e.resolveNext) {
            return e.resolveNext(r);
          } else if (e.next) {
            return e.next;
          } else {
            return N(e.parent, r);
          }
        }
      }
      function w(e, r) {
        if (e != null) {
          var t = e[r];
          if (typeof t !== 'undefined') {
            return t;
          } else {
            if (u(e)) {
              if (r === 'first') {
                return e[0];
              } else if (r === 'last') {
                return e[e.length - 1];
              } else if (r === 'random') {
                return e[Math.floor(e.length * Math.random())];
              } else {
                var n = [];
                for (var a = 0; a < e.length; a++) {
                  var i = e[a];
                  var o = i[r];
                  if (o) {
                    n.push(o);
                  }
                }
                return n;
              }
            }
          }
        }
      }
      function I(e, r, t) {
        var n = S;
        while (e.length > 0) {
          var a = e.shift();
          var i = n[a];
          if (i == null) {
            i = {};
            n[a] = i;
          }
          n = i;
        }
        n[r] = t;
      }
      function b(e, r) {
        var t = [];
        var n = e;
        while (n.meta.caller) {
          n = n.meta.caller;
        }
        if (n.meta.traceMap) {
          return n.meta.traceMap.get(r, t);
        }
      }
      function R(e, r) {
        var a = [];
        var t = null;
        while (e != null) {
          a.push(e);
          t = e;
          e = e.meta.caller;
        }
        if (t.meta.traceMap == null) {
          t.meta.traceMap = new Map();
        }
        if (!t.meta.traceMap.get(r)) {
          var n = {
            trace: a,
            print: function (e) {
              e = e || console.error;
              e('hypertrace /// ');
              var r = 0;
              for (var t = 0; t < a.length; t++) {
                r = Math.max(r, a[t].meta.feature.displayName.length);
              }
              for (var t = 0; t < a.length; t++) {
                var n = a[t];
                e(
                  '  ->',
                  n.meta.feature.displayName.padEnd(r + 2),
                  '-',
                  n.meta.owner
                );
              }
            },
          };
          t.meta.traceMap.set(r, n);
        }
      }
      var A = 'document' in S ? document.currentScript.src : null;
      return {
        typeCheck: q,
        forEach: n,
        triggerEvent: o,
        matchesSelector: t,
        getScript: f,
        processNode: k,
        evaluate: y,
        getScriptSelector: d,
        resolveSymbol: O,
        makeContext: h,
        findNext: N,
        unifiedEval: e,
        convertValue: E,
        unifiedExec: v,
        resolveProperty: w,
        assignToNamespace: I,
        registerHyperTrace: R,
        getHyperTrace: b,
        getInternalData: g,
        hyperscriptUrl: A,
        HALT: a,
      };
    })();
    {
      C.addLeafExpression('parenthesized', function (e, r, t) {
        if (t.matchOpToken('(')) {
          var n = e.requireElement('expression', t);
          t.requireOpToken(')');
          return {
            type: 'parenthesized',
            expr: n,
            evaluate: function (e) {
              return n.evaluate(e);
            },
          };
        }
      });
      C.addLeafExpression('string', function (e, r, t) {
        var n = t.matchTokenType('STRING');
        if (n) {
          var a = n.value;
          if (a.indexOf('$') >= 0) {
            var i = L.tokenize(a, true);
            var o = e.parseStringTemplate(i);
          } else {
            var o = [];
          }
          return {
            type: 'string',
            token: n,
            args: o,
            op: function (e) {
              var r = '';
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                if (n) {
                  r += n;
                }
              }
              return r;
            },
            evaluate: function (e) {
              if (o.length === 0) {
                return a;
              } else {
                return r.unifiedEval(this, e);
              }
            },
          };
        }
      });
      C.addGrammarElement('nakedString', function (e, r, t) {
        if (t.hasMore()) {
          var n = t.consumeUntilWhitespace();
          t.matchTokenType('WHITESPACE');
          return {
            type: 'nakedString',
            tokens: n,
            evaluate: function (e) {
              return n
                .map(function (e) {
                  return e.value;
                })
                .join('');
            },
          };
        }
      });
      C.addLeafExpression('number', function (e, r, t) {
        var n = t.matchTokenType('NUMBER');
        if (n) {
          var a = n;
          var i = parseFloat(n.value);
          return {
            type: 'number',
            value: i,
            numberToken: a,
            evaluate: function () {
              return i;
            },
          };
        }
      });
      C.addLeafExpression('idRef', function (e, r, t) {
        var n = t.matchTokenType('ID_REF');
        if (n) {
          return {
            type: 'idRef',
            css: n.value,
            value: n.value.substr(1),
            evaluate: function (e) {
              return document.getElementById(this.value);
            },
          };
        }
      });
      C.addLeafExpression('classRef', function (e, r, t) {
        var n = t.matchTokenType('CLASS_REF');
        if (n) {
          return {
            type: 'classRef',
            css: n.value,
            className: function () {
              return this.css.substr(1);
            },
            evaluate: function () {
              return document.querySelectorAll(this.css);
            },
          };
        }
      });
      C.addLeafExpression('queryRef', function (e, r, t) {
        var n = t.matchOpToken('<');
        if (n) {
          var a = t.consumeUntil('/');
          t.requireOpToken('/');
          t.requireOpToken('>');
          var i = a
            .map(function (e) {
              return e.value;
            })
            .join('');
          return {
            type: 'queryRef',
            css: i,
            evaluate: function () {
              return document.querySelectorAll(this.css);
            },
          };
        }
      });
      C.addGrammarElement('attributeRef', function (e, r, t) {
        if (t.matchOpToken('[')) {
          var n = t.matchTokenType('IDENTIFIER');
          var a = null;
          if (t.matchOpToken('=')) {
            a = e.requireElement('expression', t);
          }
          t.requireOpToken(']');
          return {
            type: 'attribute_expression',
            name: n.value,
            value: a,
            args: [a],
            op: function (e, r) {
              if (this.value) {
                return { name: this.name, value: r };
              } else {
                return { name: this.name };
              }
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addLeafExpression('objectLiteral', function (e, r, t) {
        if (t.matchOpToken('{')) {
          var i = [];
          var n = [];
          if (!t.matchOpToken('}')) {
            do {
              var a = t.requireTokenType('IDENTIFIER');
              t.requireOpToken(':');
              var o = e.requireElement('expression', t);
              n.push(o);
              i.push({ name: a, value: o });
            } while (t.matchOpToken(','));
            t.requireOpToken('}');
          }
          return {
            type: 'objectLiteral',
            fields: i,
            args: [n],
            op: function (e, r) {
              var t = {};
              for (var n = 0; n < r.length; n++) {
                var a = i[n];
                t[a.name.value] = r[n];
              }
              return t;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addGrammarElement('namedArgumentList', function (e, r, t) {
        if (t.matchOpToken('(')) {
          var i = [];
          var n = [];
          if (!t.matchOpToken(')')) {
            do {
              var a = t.requireTokenType('IDENTIFIER');
              t.requireOpToken(':');
              var o = e.requireElement('expression', t);
              n.push(o);
              i.push({ name: a, value: o });
            } while (t.matchOpToken(','));
            t.requireOpToken(')');
          }
          return {
            type: 'namedArgumentList',
            fields: i,
            args: [n],
            op: function (e, r) {
              var t = { _namedArgList_: true };
              for (var n = 0; n < r.length; n++) {
                var a = i[n];
                t[a.name.value] = r[n];
              }
              return t;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addGrammarElement('symbol', function (e, r, t) {
        var n = t.matchTokenType('IDENTIFIER');
        if (n) {
          return {
            type: 'symbol',
            name: n.value,
            evaluate: function (e) {
              return r.resolveSymbol(n.value, e);
            },
          };
        }
      });
      C.addGrammarElement('implicitMeTarget', function (e, r, t) {
        return {
          type: 'implicitMeTarget',
          evaluate: function (e) {
            return e.me;
          },
        };
      });
      C.addGrammarElement('implicitAllTarget', function (e, r, t) {
        return {
          type: 'implicitAllTarget',
          evaluate: function (e) {
            return document.querySelectorAll('*');
          },
        };
      });
      C.addLeafExpression('boolean', function (e, r, t) {
        var n = t.matchToken('true') || t.matchToken('false');
        if (n) {
          return {
            type: 'boolean',
            evaluate: function (e) {
              return n.value === 'true';
            },
          };
        }
      });
      C.addLeafExpression('null', function (e, r, t) {
        if (t.matchToken('null')) {
          return {
            type: 'null',
            evaluate: function (e) {
              return null;
            },
          };
        }
      });
      C.addLeafExpression('arrayLiteral', function (e, r, t) {
        if (t.matchOpToken('[')) {
          var n = [];
          if (!t.matchOpToken(']')) {
            do {
              var a = e.requireElement('expression', t);
              n.push(a);
            } while (t.matchOpToken(','));
            t.requireOpToken(']');
          }
          return {
            type: 'arrayLiteral',
            values: n,
            args: [n],
            op: function (e, r) {
              return r;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addLeafExpression('blockLiteral', function (e, r, t) {
        if (t.matchOpToken('\\')) {
          var n = [];
          var a = t.matchTokenType('IDENTIFIER');
          if (a) {
            n.push(a);
            while (t.matchOpToken(',')) {
              n.push(t.requireTokenType('IDENTIFIER'));
            }
          }
          t.requireOpToken('-');
          t.requireOpToken('>');
          var i = e.requireElement('expression', t);
          return {
            type: 'blockLiteral',
            args: n,
            expr: i,
            evaluate: function (r) {
              var e = function () {
                for (var e = 0; e < n.length; e++) {
                  r[n[e].value] = arguments[e];
                }
                return i.evaluate(r);
              };
              return e;
            },
          };
        }
      });
      C.addGrammarElement('timeExpression', function (e, r, t) {
        var n = e.requireElement('expression', t);
        var a = 1;
        if (t.matchToken('s') || t.matchToken('seconds')) {
          a = 1e3;
        } else if (t.matchToken('ms') || t.matchToken('milliseconds')) {
        }
        return {
          type: 'timeExpression',
          time: n,
          factor: a,
          args: [n],
          op: function (e, r) {
            return r * this.factor;
          },
          evaluate: function (e) {
            return r.unifiedEval(this, e);
          },
        };
      });
      C.addIndirectExpression('propertyAccess', function (e, t, r, n) {
        if (r.matchOpToken('.')) {
          var a = r.requireTokenType('IDENTIFIER');
          var i = {
            type: 'propertyAccess',
            root: n,
            prop: a,
            args: [n],
            op: function (e, r) {
              return t.resolveProperty(r, a.value);
            },
            evaluate: function (e) {
              return t.unifiedEval(this, e);
            },
          };
          return e.parseElement('indirectExpression', r, i);
        }
      });
      C.addIndirectExpression('inExpression', function (e, a, r, i) {
        if (r.matchToken('in')) {
          if (
            (i.type !== 'idRef' && i.type === 'queryRef') ||
            i.type === 'classRef'
          ) {
            var o = true;
          }
          var t = e.requireElement('expression', r);
          var n = {
            type: 'inExpression',
            root: i,
            args: [o ? null : i, t],
            op: function (e, r, t) {
              var n = [];
              if (o) {
                a.forEach(t, function (e) {
                  var r = e.querySelectorAll(i.css);
                  for (var t = 0; t < r.length; t++) {
                    n.push(r[t]);
                  }
                });
              } else {
                a.forEach(r, function (r) {
                  a.forEach(t, function (e) {
                    if (r === e) {
                      n.push(r);
                    }
                  });
                });
              }
              if (n.length > 0) {
                return n;
              } else {
                return null;
              }
            },
            evaluate: function (e) {
              return a.unifiedEval(this, e);
            },
          };
          return e.parseElement('indirectExpression', r, n);
        }
      });
      C.addIndirectExpression('asExpression', function (e, t, r, n) {
        if (r.matchToken('as')) {
          var a = e.requireElement('dotOrColonPath', r).evaluate();
          var i = {
            type: 'asExpression',
            root: n,
            args: [n],
            op: function (e, r) {
              return t.convertValue(r, a);
            },
            evaluate: function (e) {
              return t.unifiedEval(this, e);
            },
          };
          return e.parseElement('indirectExpression', r, i);
        }
      });
      C.addIndirectExpression('functionCall', function (e, r, t, a) {
        if (t.matchOpToken('(')) {
          var n = [];
          if (!t.matchOpToken(')')) {
            do {
              n.push(e.requireElement('expression', t));
            } while (t.matchOpToken(','));
            t.requireOpToken(')');
          }
          if (a.root) {
            var i = {
              type: 'functionCall',
              root: a,
              argExressions: n,
              args: [a.root, n],
              op: function (e, r, t) {
                var n = r[a.prop.value];
                if (n.hyperfunc) {
                  t.push(e);
                }
                return n.apply(r, t);
              },
              evaluate: function (e) {
                return r.unifiedEval(this, e);
              },
            };
          } else {
            var i = {
              type: 'functionCall',
              root: a,
              argExressions: n,
              args: [a, n],
              op: function (e, r, t) {
                if (r.hyperfunc) {
                  t.push(e);
                }
                var n = r.apply(null, t);
                return n;
              },
              evaluate: function (e) {
                return r.unifiedEval(this, e);
              },
            };
          }
          return e.parseElement('indirectExpression', t, i);
        }
      });
      C.addIndirectExpression('arrayIndex', function (e, r, t, n) {
        if (t.matchOpToken('[')) {
          var a = e.requireElement('expression', t);
          t.requireOpToken(']');
          var i = {
            type: 'arrayIndex',
            root: n,
            index: a,
            args: [n, a],
            op: function (e, r, t) {
              return r[t];
            },
            evaluate: function (e) {
              return F.unifiedEval(this, e);
            },
          };
          return C.parseElement('indirectExpression', t, i);
        }
      });
      C.addGrammarElement('postfixExpression', function (e, t, r) {
        var n = e.parseElement('primaryExpression', r);
        if (r.matchOpToken(':')) {
          var a = r.requireTokenType('IDENTIFIER');
          var i = !r.matchOpToken('!');
          return {
            type: 'typeCheck',
            typeName: a,
            root: n,
            nullOk: i,
            args: [n],
            op: function (e, r) {
              return t.typeCheck(r, this.typeName.value, this.nullOk);
            },
            evaluate: function (e) {
              return t.unifiedEval(this, e);
            },
          };
        } else {
          return n;
        }
      });
      C.addGrammarElement('logicalNot', function (e, r, t) {
        if (t.matchToken('not')) {
          var n = e.requireElement('unaryExpression', t);
          return {
            type: 'logicalNot',
            root: n,
            args: [n],
            op: function (e, r) {
              return !r;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addGrammarElement('noExpression', function (e, r, t) {
        if (t.matchToken('no')) {
          var n = e.requireElement('unaryExpression', t);
          return {
            type: 'noExpression',
            root: n,
            args: [n],
            op: function (e, r) {
              return r == null;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addGrammarElement('negativeNumber', function (e, r, t) {
        if (t.matchOpToken('-')) {
          var n = e.requireElement('unaryExpression', t);
          return {
            type: 'negativeNumber',
            root: n,
            args: [n],
            op: function (e, r) {
              return -1 * r;
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
      });
      C.addGrammarElement('unaryExpression', function (e, r, t) {
        return e.parseAnyOf(
          ['logicalNot', 'noExpression', 'negativeNumber', 'postfixExpression'],
          t
        );
      });
      C.addGrammarElement('mathOperator', function (e, r, t) {
        var n = e.parseElement('unaryExpression', t);
        var a,
          i = null;
        a = t.matchAnyOpToken('+', '-', '*', '/', '%');
        while (a) {
          i = i || a;
          var o = a.value;
          if (i.value !== o) {
            e.raiseParseError(
              t,
              'You must parenthesize math operations with different operators'
            );
          }
          var u = e.parseElement('unaryExpression', t);
          n = {
            type: 'mathOperator',
            lhs: n,
            rhs: u,
            operator: o,
            args: [n, u],
            op: function (e, r, t) {
              if (this.operator === '+') {
                return r + t;
              } else if (this.operator === '-') {
                return r - t;
              } else if (this.operator === '*') {
                return r * t;
              } else if (this.operator === '/') {
                return r / t;
              } else if (this.operator === '%') {
                return r % t;
              }
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
          a = t.matchAnyOpToken('+', '-', '*', '/', '%');
        }
        return n;
      });
      C.addGrammarElement('mathExpression', function (e, r, t) {
        return e.parseAnyOf(['mathOperator', 'unaryExpression'], t);
      });
      C.addGrammarElement('comparisonOperator', function (e, r, t) {
        var n = e.parseElement('mathExpression', t);
        var a = t.matchAnyOpToken(
          '<',
          '>',
          '<=',
          '>=',
          '==',
          '===',
          '!=',
          '!=='
        );
        var i = a ? a.value : null;
        if (i == null) {
          if (t.matchToken('is') || t.matchToken('am')) {
            if (t.matchToken('not')) {
              if (t.matchToken('in')) {
                i = 'not in';
              } else {
                i = '!=';
              }
            } else {
              if (t.matchToken('in')) {
                i = 'in';
              } else {
                i = '==';
              }
            }
          } else if (t.matchToken('matches') || t.matchToken('match')) {
            i = 'match';
          } else if (t.matchToken('contains') || t.matchToken('contain')) {
            i = 'contain';
          } else if (t.matchToken('do') || t.matchToken('does')) {
            t.requireToken('not');
            if (t.matchToken('matches') || t.matchToken('match')) {
              i = 'not match';
            } else if (t.matchToken('contains') || t.matchToken('contain')) {
              i = 'not contain';
            } else {
              e.raiseParseError(t, 'Expected matches or contains');
            }
          }
        }
        if (i) {
          var o = e.requireElement('mathExpression', t);
          if (i === 'match' || i === 'not match') {
            o = o.css ? o.css : o;
          }
          n = {
            type: 'comparisonOperator',
            operator: i,
            lhs: n,
            rhs: o,
            args: [n, o],
            op: function (e, r, t) {
              if (this.operator === '==') {
                return r == t;
              } else if (this.operator === '!=') {
                return r != t;
              }
              if (this.operator === 'in') {
                return t != null && Array.from(t).indexOf(r) >= 0;
              }
              if (this.operator === 'not in') {
                return t == null || Array.from(t).indexOf(r) < 0;
              }
              if (this.operator === 'match') {
                return r != null && r.matches(t);
              }
              if (this.operator === 'not match') {
                return r == null || !r.matches(t);
              }
              if (this.operator === 'contain') {
                return r != null && r.contains(t);
              }
              if (this.operator === 'not contain') {
                return r == null || !r.contains(t);
              }
              if (this.operator === '===') {
                return r === t;
              } else if (this.operator === '!==') {
                return r !== t;
              } else if (this.operator === '<') {
                return r < t;
              } else if (this.operator === '>') {
                return r > t;
              } else if (this.operator === '<=') {
                return r <= t;
              } else if (this.operator === '>=') {
                return r >= t;
              }
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
        }
        return n;
      });
      C.addGrammarElement('comparisonExpression', function (e, r, t) {
        return e.parseAnyOf(['comparisonOperator', 'mathExpression'], t);
      });
      C.addGrammarElement('logicalOperator', function (e, r, t) {
        var n = e.parseElement('comparisonExpression', t);
        var a,
          i = null;
        a = t.matchToken('and') || t.matchToken('or');
        while (a) {
          i = i || a;
          if (i.value !== a.value) {
            e.raiseParseError(
              t,
              'You must parenthesize logical operations with different operators'
            );
          }
          var o = e.requireElement('comparisonExpression', t);
          n = {
            type: 'logicalOperator',
            operator: a.value,
            lhs: n,
            rhs: o,
            args: [n, o],
            op: function (e, r, t) {
              if (this.operator === 'and') {
                return r && t;
              } else {
                return r || t;
              }
            },
            evaluate: function (e) {
              return r.unifiedEval(this, e);
            },
          };
          a = t.matchToken('and') || t.matchToken('or');
        }
        return n;
      });
      C.addGrammarElement('logicalExpression', function (e, r, t) {
        return e.parseAnyOf(['logicalOperator', 'mathExpression'], t);
      });
      C.addGrammarElement('asyncExpression', function (e, r, t) {
        if (t.matchToken('async')) {
          var n = e.requireElement('logicalExpression', t);
          var a = {
            type: 'asyncExpression',
            value: n,
            evaluate: function (e) {
              return { asyncWrapper: true, value: this.value.evaluate(e) };
            },
          };
          return a;
        } else {
          return e.parseElement('logicalExpression', t);
        }
      });
      C.addGrammarElement('expression', function (e, r, t) {
        return e.parseElement('asyncExpression', t);
      });
      C.addGrammarElement('target', function (e, r, t) {
        var n = C.parseElement('expression', t);
        if (
          n.type === 'symbol' ||
          n.type === 'idRef' ||
          n.type === 'queryRef' ||
          n.type === 'classRef' ||
          n.type === 'propertyAccess'
        ) {
          return n;
        } else {
          C.raiseParseError(t, 'A target expression must be writable');
        }
        return n;
      });
      C.addGrammarElement('hyperscript', function (e, r, t) {
        var n = [];
        if (t.hasMore()) {
          do {
            var a = e.requireElement('feature', t);
            n.push(a);
            var i =
              a.type === 'onFeature' &&
              t.currentToken() &&
              t.currentToken().value === 'on';
          } while ((i || t.matchToken('end')) && t.hasMore());
          if (t.hasMore()) {
            e.raiseParseError(t);
          }
        }
        return {
          type: 'hyperscript',
          features: n,
          apply: function (r, t) {
            F.forEach(n, function (e) {
              e.install(r, t);
            });
          },
        };
      });
      C.addFeature('on', function (e, u, r) {
        if (r.matchToken('on')) {
          var t = false;
          if (r.matchToken('every')) {
            t = true;
          }
          var n = [];
          var a = null;
          do {
            var i = e.requireElement(
              'dotOrColonPath',
              r,
              'Expected event name'
            );
            var o = i.evaluate();
            if (a) {
              a = a + ' or ' + o;
            } else {
              a = 'on ' + o;
            }
            var s = [];
            if (r.matchOpToken('(')) {
              do {
                s.push(r.requireTokenType('IDENTIFIER'));
              } while (r.matchOpToken(','));
              r.requireOpToken(')');
            }
            var l = null;
            if (r.matchOpToken('[')) {
              l = e.requireElement('expression', r);
              r.requireOpToken(']');
            }
            var f = null;
            var c = false;
            if (r.matchToken('from')) {
              if (r.matchToken('elsewhere')) {
                c = true;
              } else {
                f = e.parseElement('target', r);
                if (!f) {
                  e.raiseParseError(
                    'Expected either target value or "elsewhere".',
                    r
                  );
                }
              }
            }
            if (r.matchToken('in')) {
              var m = e.parseAnyOf(['idRef', 'queryRef', 'classRef'], r);
            }
            if (f === null && c === false && r.matchToken('elsewhere')) {
              c = true;
            }
            n.push({
              every: t,
              on: o,
              args: s,
              filter: l,
              from: f,
              inExpr: m,
              elsewhere: c,
            });
          } while (r.matchToken('or'));
          var p = [];
          var v = true;
          if (!t) {
            if (r.matchToken('queue')) {
              if (r.matchToken('all')) {
                var h = true;
                var v = false;
              } else if (r.matchToken('first')) {
                var d = true;
              } else if (r.matchToken('none')) {
                var E = true;
              } else {
                r.requireToken('last');
              }
            }
          }
          var T = e.requireElement('commandList', r);
          var y = {
            type: 'implicitReturn',
            op: function (e) {
              e.meta.resolve();
              return u.HALT;
            },
            execute: function (e) {},
          };
          if (T) {
            var k = T;
            while (k.next) {
              k = k.next;
            }
            k.next = y;
          } else {
            T = y;
          }
          var x = {
            displayName: a,
            events: n,
            start: T,
            every: t,
            executing: false,
            execCount: 0,
            queue: p,
            execute: function (n) {
              if (this.executing && this.every === false) {
                if (E || (d && p.length > 0)) {
                  return;
                }
                if (v) {
                  x.queue.length = 0;
                }
                x.queue.push(n);
                return;
              }
              this.execCount++;
              this.executing = true;
              n.meta.resolve = function () {
                x.executing = false;
                var e = x.queue.shift();
                if (e) {
                  setTimeout(function () {
                    x.execute(e);
                  }, 1);
                }
              };
              n.meta.reject = function (e) {
                console.error(e.message ? e.message : e);
                var r = u.getHyperTrace(n, e);
                if (r) {
                  r.print();
                }
                u.triggerEvent(n.me, 'exception', { error: e });
                x.executing = false;
                var t = x.queue.shift();
                if (t) {
                  setTimeout(function () {
                    x.execute(t);
                  }, 1);
                }
              };
              T.execute(n);
            },
            install: function (o, e) {
              u.forEach(x.events, function (i) {
                var e;
                if (i.elsewhere) {
                  e = [document];
                } else if (i.from) {
                  e = i.from.evaluate({});
                } else {
                  e = [o];
                }
                u.forEach(e, function (e) {
                  e.addEventListener(i.on, function (e) {
                    var r = u.makeContext(o, x, o, e);
                    if (i.elsewhere && o.contains(e.target)) {
                      return;
                    }
                    u.forEach(i.args, function (e) {
                      r[e.value] =
                        r.event[e.value] ||
                        (r.event.detail ? r.event.detail[e.value] : null);
                    });
                    if (i.filter) {
                      var t = r.meta.context;
                      r.meta.context = r.event;
                      try {
                        var n = i.filter.evaluate(r);
                        if (n) {
                        } else {
                          return;
                        }
                      } finally {
                        r.meta.context = t;
                      }
                    }
                    if (i.inExpr) {
                      var a = e.target;
                      while (true) {
                        if (a.matches && a.matches(i.inExpr.css)) {
                          r.it = a;
                          break;
                        } else {
                          a = a.parentElement;
                          if (a == null) {
                            return;
                          }
                        }
                      }
                    }
                    x.execute(r);
                  });
                });
              });
            },
          };
          e.setParent(T, x);
          return x;
        }
      });
      C.addFeature('def', function (e, l, r) {
        if (r.matchToken('def')) {
          var t = e.requireElement('dotOrColonPath', r);
          var n = t.evaluate();
          var a = n.split('.');
          var i = a.pop();
          var f = [];
          if (r.matchOpToken('(')) {
            if (r.matchOpToken(')')) {
            } else {
              do {
                f.push(r.requireTokenType('IDENTIFIER'));
              } while (r.matchOpToken(','));
              r.requireOpToken(')');
            }
          }
          var c = e.parseElement('commandList', r);
          if (r.matchToken('catch')) {
            var m = r.requireTokenType('IDENTIFIER').value;
            var p = e.parseElement('commandList', r);
          }
          var v = {
            displayName:
              i +
              '(' +
              f
                .map(function (e) {
                  return e.value;
                })
                .join(', ') +
              ')',
            name: i,
            args: f,
            start: c,
            errorHandler: p,
            errorSymbol: m,
            install: function (e, s) {
              var r = function () {
                var e = 'document' in S ? document.body : S;
                var r = l.makeContext(s, v, e, null);
                r.meta.errorHandler = p;
                r.meta.errorSymmbol = m;
                for (var t = 0; t < f.length; t++) {
                  var n = f[t];
                  var a = arguments[t];
                  if (n) {
                    r[n.value] = a;
                  }
                }
                r.meta.caller = arguments[f.length];
                var i,
                  o = null;
                var u = new Promise(function (e, r) {
                  i = e;
                  o = r;
                });
                c.execute(r);
                if (r.meta.returned) {
                  return r.meta.returnValue;
                } else {
                  r.meta.resolve = i;
                  r.meta.reject = o;
                  return u;
                }
              };
              r.hyperfunc = true;
              l.assignToNamespace(a, i, r);
            },
          };
          var o = {
            type: 'implicitReturn',
            op: function (e) {
              e.meta.returned = true;
              if (e.meta.resolve) {
                e.meta.resolve();
              }
              return l.HALT;
            },
            execute: function (e) {},
          };
          if (c) {
            var u = c;
            while (u.next) {
              u = u.next;
            }
            u.next = o;
          } else {
            v.start = o;
          }
          if (p) {
            var u = p;
            while (u.next) {
              u = u.next;
            }
            u.next = o;
          }
          e.setParent(c, v);
          return v;
        }
      });
      C.addFeature('worker', function (e, r, t) {
        if (t.matchToken('worker')) {
          e.raiseParseError(
            t,
            "In order to use the 'worker' feature, include " +
              'the _hyperscript worker plugin. See ' +
              'https://hyperscript.org/features/worker/ for ' +
              'more info.'
          );
        }
      });
      C.addGrammarElement('jsBody', function (e, r, t) {
        var n = t.currentToken().start;
        var a = t.currentToken();
        var i = [];
        var o = '';
        var u = false;
        while (t.hasMore()) {
          a = t.consumeToken();
          var s = t.currentToken(true);
          if (s.type === 'IDENTIFIER' && s.value === 'end') {
            break;
          }
          if (u) {
            if (a.type === 'IDENTIFIER' || a.type === 'NUMBER') {
              o += a.value;
            } else {
              if (o !== '') i.push(o);
              o = '';
              u = false;
            }
          } else if (a.type === 'IDENTIFIER' && a.value === 'function') {
            u = true;
          }
        }
        var l = a.end + 1;
        return {
          type: 'jsBody',
          exposedFunctionNames: i,
          jsSource: t.source.substring(n, l),
        };
      });
      C.addFeature('js', function (e, r, t) {
        if (t.matchToken('js')) {
          var n = e.parseElement('jsBody', t);
          var a =
            n.jsSource +
            '\nreturn { ' +
            n.exposedFunctionNames
              .map(function (e) {
                return e + ':' + e;
              })
              .join(',') +
            ' } ';
          var i = new Function(a);
          return {
            jsSource: a,
            function: i,
            exposedFunctionNames: n.exposedFunctionNames,
            install: function () {
              o(S, i());
            },
          };
        }
      });
      C.addCommand('js', function (e, n, r) {
        if (r.matchToken('js')) {
          var a = [];
          if (r.matchOpToken('(')) {
            if (r.matchOpToken(')')) {
            } else {
              do {
                var t = r.requireTokenType('IDENTIFIER');
                a.push(t.value);
              } while (r.matchOpToken(','));
              r.requireOpToken(')');
            }
          }
          var i = e.parseElement('jsBody', r);
          r.matchToken('end');
          var o = u(Function, a.concat([i.jsSource]));
          return {
            jsSource: i.jsSource,
            function: o,
            inputs: a,
            op: function (t) {
              var r = [];
              a.forEach(function (e) {
                r.push(n.resolveSymbol(e, t));
              });
              var e = o.apply(S, r);
              if (e && typeof e.then === 'function') {
                return Promise(function (r) {
                  e.then(function (e) {
                    t.it = e;
                    r(n.findNext(this, t));
                  });
                });
              } else {
                t.it = e;
                return n.findNext(this, t);
              }
            },
          };
        }
      });
      C.addCommand('async', function (e, r, t) {
        if (t.matchToken('async')) {
          if (t.matchToken('do')) {
            var n = e.requireElement('commandList', t);
            t.requireToken('end');
          } else {
            var n = e.requireElement('command', t);
          }
          return {
            body: n,
            op: function (e) {
              setTimeout(function () {
                n.execute(e);
              });
              return r.findNext(this, e);
            },
          };
        }
      });
      C.addCommand('with', function (e, t, r) {
        var n = r.currentToken();
        if (r.matchToken('with')) {
          var a = e.requireElement('expression', r);
          var i = e.requireElement('commandList', r);
          if (r.hasMore()) {
            r.requireToken('end');
          }
          var o = 'with_' + n.start;
          var u = {
            value: a,
            body: i,
            args: [a],
            resolveNext: function (e) {
              var r = e.meta.iterators[o];
              if (r.index < r.value.length) {
                e.me = r.value[r.index++];
                return i;
              } else {
                e.me = r.originalMe;
                if (this.next) {
                  return this.next;
                } else {
                  return t.findNext(this.parent, e);
                }
              }
            },
            op: function (e, r) {
              if (r == null) {
                r = [];
              } else if (!(Array.isArray(r) || r instanceof NodeList)) {
                r = [r];
              }
              e.meta.iterators[o] = { originalMe: e.me, index: 0, value: r };
              return this.resolveNext(e);
            },
          };
          e.setParent(i, u);
          return u;
        }
      });
      C.addCommand('add', function (e, n, r) {
        if (r.matchToken('add')) {
          var t = e.parseElement('classRef', r);
          var a = null;
          if (t == null) {
            a = e.parseElement('attributeRef', r);
            if (a == null) {
              e.raiseParseError(
                r,
                'Expected either a class reference or attribute expression'
              );
            }
          }
          if (r.matchToken('to')) {
            var i = e.requireElement('target', r);
          } else {
            var i = e.parseElement('implicitMeTarget');
          }
          if (t) {
            var o = {
              classRef: t,
              attributeRef: a,
              to: i,
              args: [i],
              op: function (e, r) {
                n.forEach(r, function (e) {
                  e.classList.add(t.className());
                });
                return n.findNext(this, e);
              },
            };
          } else {
            var o = {
              type: 'addCmd',
              classRef: t,
              attributeRef: a,
              to: i,
              args: [i, a],
              op: function (e, r, t) {
                n.forEach(r, function (e) {
                  e.setAttribute(t.name, t.value);
                });
                return n.findNext(o, e);
              },
              execute: function (e) {
                return n.unifiedExec(this, e);
              },
            };
          }
          return o;
        }
      });
      C.addCommand('remove', function (e, t, r) {
        if (r.matchToken('remove')) {
          var n = e.parseElement('classRef', r);
          var a = null;
          var i = null;
          if (n == null) {
            a = e.parseElement('attributeRef', r);
            if (a == null) {
              i = e.parseElement('expression', r);
              if (i == null) {
                e.raiseParseError(
                  r,
                  'Expected either a class reference, attribute expression or value expression'
                );
              }
            }
          }
          if (r.matchToken('from')) {
            var o = e.requireElement('target', r);
          } else {
            var o = e.requireElement('implicitMeTarget');
          }
          if (i) {
            var u = {
              classRef: n,
              attributeRef: a,
              elementExpr: i,
              from: o,
              args: [i],
              op: function (e, r) {
                t.forEach(r, function (e) {
                  e.parentElement.removeChild(e);
                });
                return t.findNext(this, e);
              },
            };
          } else {
            var u = {
              classRef: n,
              attributeRef: a,
              elementExpr: i,
              from: o,
              args: [o],
              op: function (e, r) {
                if (this.classRef) {
                  t.forEach(r, function (e) {
                    e.classList.remove(n.className());
                  });
                } else {
                  t.forEach(r, function (e) {
                    e.removeAttribute(a.name);
                  });
                }
                return t.findNext(this, e);
              },
            };
          }
          return u;
        }
      });
      C.addCommand('toggle', function (e, u, r) {
        if (r.matchToken('toggle')) {
          var t = e.parseElement('classRef', r);
          var n = null;
          if (t == null) {
            n = e.parseElement('attributeRef', r);
            if (n == null) {
              e.raiseParseError(
                r,
                'Expected either a class reference or attribute expression'
              );
            }
          }
          if (r.matchToken('on')) {
            var a = e.requireElement('target', r);
          } else {
            var a = e.requireElement('implicitMeTarget');
          }
          if (r.matchToken('for')) {
            var i = e.requireElement('timeExpression', r);
          } else if (r.matchToken('until')) {
            var o = e.requireElement(
              'dotOrColonPath',
              r,
              'Expected event name'
            );
            if (r.matchToken('from')) {
              var s = e.requireElement('expression', r);
            }
          }
          var l = {
            classRef: t,
            attributeRef: n,
            on: a,
            time: i,
            evt: o,
            from: s,
            toggle: function (e, r) {
              if (this.classRef) {
                u.forEach(e, function (e) {
                  e.classList.toggle(t.className());
                });
              } else {
                u.forEach(e, function (e) {
                  if (e.hasAttribute(n.name)) {
                    e.removeAttribute(n.name);
                  } else {
                    e.setAttribute(n.name, r);
                  }
                });
              }
            },
            args: [a, n ? n.value : null, i, o, s],
            op: function (t, n, a, r, i, o) {
              if (r) {
                return new Promise(function (e) {
                  l.toggle(n, a);
                  setTimeout(function () {
                    l.toggle(n, a);
                    e(u.findNext(l, t));
                  }, r);
                });
              } else if (i) {
                return new Promise(function (e) {
                  var r = o || t.me;
                  r.addEventListener(
                    i,
                    function () {
                      l.toggle(n, a);
                      e(u.findNext(l, t));
                    },
                    { once: true }
                  );
                  l.toggle(n, a);
                });
              } else {
                this.toggle(n, a);
                return u.findNext(l, t);
              }
            },
          };
          return l;
        }
      });
      var s = {
        display: function (e, r, t) {
          if (t) {
            r.style.display = t;
          } else if (e === 'hide') {
            r.style.display = 'none';
          } else {
            r.style.display = 'block';
          }
        },
        visibility: function (e, r, t) {
          if (t) {
            r.style.visibility = t;
          } else if (e === 'hide') {
            r.style.visibility = 'hidden';
          } else {
            r.style.visibility = 'visible';
          }
        },
        opacity: function (e, r, t) {
          if (t) {
            r.style.opacity = t;
          } else if (e === 'hide') {
            r.style.opacity = '0';
          } else {
            r.style.opacity = '1';
          }
        },
      };
      var l = function (e, r, t) {
        var n;
        var a = t.currentToken();
        if (a.value === 'with' || e.commandBoundary(a)) {
          n = e.parseElement('implicitMeTarget', t);
        } else {
          n = e.parseElement('target', t);
        }
        return n;
      };
      var f = function (e, r, t) {
        var n = _hyperscript.config.defaultHideShowStrategy;
        var a = s;
        if (_hyperscript.config.hideShowStrategies) {
          a = o(a, _hyperscript.config.hideShowStrategies);
        }
        t = t || n || 'display';
        var i = a[t];
        if (i == null) {
          e.raiseParseError(r, 'Unknown show/hide strategy : ' + t);
        }
        return i;
      };
      C.addCommand('hide', function (e, t, r) {
        if (r.matchToken('hide')) {
          var n = l(e, t, r);
          var a = null;
          if (r.matchToken('with')) {
            a = r.requireTokenType('IDENTIFIER').value;
          }
          var i = f(e, r, a);
          return {
            target: n,
            args: [n],
            op: function (e, r) {
              t.forEach(r, function (e) {
                i('hide', e);
              });
              return t.findNext(this, e);
            },
          };
        }
      });
      C.addCommand('show', function (e, t, r) {
        if (r.matchToken('show')) {
          var n = l(e, t, r);
          var a = null;
          if (r.matchToken('with')) {
            a = r.requireTokenType('IDENTIFIER').value;
          }
          var i = null;
          if (r.matchOpToken(':')) {
            var o = r.consumeUntilWhitespace();
            r.matchTokenType('WHITESPACE');
            i = o
              .map(function (e) {
                return e.value;
              })
              .join('');
          }
          var u = f(e, r, a);
          return {
            target: n,
            args: [n],
            op: function (e, r) {
              t.forEach(r, function (e) {
                u('show', e, i);
              });
              return t.findNext(this, e);
            },
          };
        }
      });
      C.addCommand('wait', function (e, i, r) {
        if (r.matchToken('wait')) {
          if (r.matchToken('for')) {
            r.matchToken('a');
            var t = C.requireElement(
              'dotOrColonPath',
              r,
              'Expected event name'
            );
            if (r.matchToken('from')) {
              var n = e.requireElement('expression', r);
            }
            var o = {
              event: t,
              on: n,
              args: [t, n],
              op: function (t, n, e) {
                var a = e ? e : t.me;
                return new Promise(function (e) {
                  var r = function () {
                    e(i.findNext(o, t));
                  };
                  a.addEventListener(n, r, { once: true });
                });
              },
            };
          } else {
            var a = C.requireElement('timeExpression', r);
            var o = {
              type: 'waitCmd',
              time: a,
              args: [a],
              op: function (r, t) {
                return new Promise(function (e) {
                  setTimeout(function () {
                    e(i.findNext(o, r));
                  }, t);
                });
              },
              execute: function (e) {
                return i.unifiedExec(this, e);
              },
            };
          }
          return o;
        }
      });
      C.addGrammarElement('dotOrColonPath', function (e, r, t) {
        var n = t.matchTokenType('IDENTIFIER');
        if (n) {
          var a = [n.value];
          var i = t.matchOpToken('.') || t.matchOpToken(':');
          if (i) {
            do {
              a.push(t.requireTokenType('IDENTIFIER').value);
            } while (t.matchOpToken(i.value));
          }
          return {
            type: 'dotOrColonPath',
            path: a,
            evaluate: function () {
              return a.join(i ? i.value : '');
            },
          };
        }
      });
      C.addCommand('send', function (e, a, r) {
        if (r.matchToken('send')) {
          var t = e.requireElement('dotOrColonPath', r);
          var n = e.parseElement('namedArgumentList', r);
          if (r.matchToken('to')) {
            var i = e.requireElement('target', r);
          } else {
            var i = e.requireElement('implicitMeTarget');
          }
          var o = {
            eventName: t,
            details: n,
            to: i,
            args: [i, t, n],
            op: function (e, r, t, n) {
              a.forEach(r, function (e) {
                a.triggerEvent(e, t, n ? n : {});
              });
              return a.findNext(o, e);
            },
          };
          return o;
        }
      });
      C.addCommand('return', function (e, n, r) {
        if (r.matchToken('return')) {
          var t = e.requireElement('expression', r);
          var a = {
            value: t,
            args: [t],
            op: function (e, r) {
              var t = e.meta.resolve;
              e.meta.returned = true;
              if (t) {
                if (r) {
                  t(r);
                } else {
                  t();
                }
              } else {
                e.meta.returned = true;
                e.meta.returnValue = r;
              }
              return n.HALT;
            },
          };
          return a;
        }
      });
      C.addCommand('trigger', function (e, n, r) {
        if (r.matchToken('trigger')) {
          var t = e.requireElement('dotOrColonPath', r);
          var a = e.parseElement('namedArgumentList', r);
          var i = {
            eventName: t,
            details: a,
            args: [t, a],
            op: function (e, r, t) {
              n.triggerEvent(e.me, r, t ? t : {});
              return n.findNext(i, e);
            },
          };
          return i;
        }
      });
      C.addCommand('take', function (e, a, r) {
        if (r.matchToken('take')) {
          var t = r.requireTokenType(r, 'CLASS_REF');
          if (r.matchToken('from')) {
            var n = e.requireElement('target', r);
          } else {
            var n = e.requireElement('implicitAllTarget');
          }
          if (r.matchToken('for')) {
            var i = e.requireElement('target', r);
          } else {
            var i = e.requireElement('implicitMeTarget');
          }
          var o = {
            classRef: t,
            from: n,
            forElt: i,
            args: [n, i],
            op: function (e, r, t) {
              var n = this.classRef.value.substr(1);
              a.forEach(r, function (e) {
                e.classList.remove(n);
              });
              a.forEach(t, function (e) {
                e.classList.add(n);
              });
              return a.findNext(this, e);
            },
          };
          return o;
        }
      });
      C.addCommand('log', function (e, n, r) {
        if (r.matchToken('log')) {
          var t = [e.parseElement('expression', r)];
          while (r.matchOpToken(',')) {
            t.push(e.requireElement('expression', r));
          }
          if (r.matchToken('with')) {
            var a = e.requireElement('expression', r);
          }
          var i = {
            exprs: t,
            withExpr: a,
            args: [a, t],
            op: function (e, r, t) {
              if (r) {
                r.apply(null, t);
              } else {
                console.log.apply(null, t);
              }
              return n.findNext(this, e);
            },
          };
          return i;
        }
      });
      C.addCommand('throw', function (e, n, r) {
        if (r.matchToken('throw')) {
          var t = e.requireElement('expression', r);
          var a = {
            expr: t,
            args: [t],
            op: function (e, r) {
              n.registerHyperTrace(e, r);
              var t = e.meta && e.meta.reject;
              if (t) {
                t(r);
                return n.HALT;
              } else {
                throw r;
              }
            },
          };
          return a;
        }
      });
      var n = function (e, t, r) {
        var n = e.requireElement('expression', r);
        var a = {
          expr: n,
          args: [n],
          op: function (e, r) {
            e.it = r;
            return t.findNext(a, e);
          },
        };
        return a;
      };
      C.addCommand('call', function (e, r, t) {
        if (t.matchToken('call')) {
          return n(e, r, t);
        }
      });
      C.addCommand('get', function (e, r, t) {
        if (t.matchToken('get')) {
          return n(e, r, t);
        }
      });
      C.addCommand('put', function (e, n, r) {
        if (r.matchToken('put')) {
          var t = e.requireElement('expression', r);
          var a =
            r.matchToken('into') ||
            r.matchToken('before') ||
            r.matchToken('after');
          if (a == null && r.matchToken('at')) {
            a = r.matchToken('start') || r.matchToken('end');
            r.requireToken('of');
          }
          if (a == null) {
            e.raiseParseError(
              r,
              "Expected one of 'into', 'before', 'at start of', 'at end of', 'after'"
            );
          }
          var i = e.requireElement('target', r);
          var o = a.value;
          var u = i.type === 'symbol' && o === 'into';
          if (i.type !== 'symbol' && o === 'into' && i.root == null) {
            e.raiseParseError(
              r,
              'Can only put directly into symbols, not references'
            );
          }
          var s = null;
          var l = null;
          if (u) {
          } else if (o === 'into') {
            l = i.prop.value;
            s = i.root;
          } else {
            s = i;
          }
          var f = {
            target: i,
            operation: o,
            symbolWrite: u,
            value: t,
            args: [s, t],
            op: function (e, r, t) {
              if (u) {
                e[i.name] = t;
              } else {
                if (o === 'into') {
                  n.forEach(r, function (e) {
                    e[l] = t;
                  });
                } else if (o === 'before') {
                  n.forEach(r, function (e) {
                    e.insertAdjacentHTML('beforebegin', t);
                  });
                } else if (o === 'start') {
                  n.forEach(r, function (e) {
                    e.insertAdjacentHTML('afterbegin', t);
                  });
                } else if (o === 'end') {
                  n.forEach(r, function (e) {
                    e.insertAdjacentHTML('beforeend', t);
                  });
                } else if (o === 'after') {
                  n.forEach(r, function (e) {
                    e.insertAdjacentHTML('afterend', t);
                  });
                }
              }
              return n.findNext(this, e);
            },
          };
          return f;
        }
      });
      C.addCommand('set', function (e, n, r) {
        if (r.matchToken('set')) {
          var a = e.requireElement('target', r);
          r.requireToken('to');
          var t = e.requireElement('expression', r);
          var i = a.type === 'symbol';
          if (a.type !== 'symbol' && a.root == null) {
            e.raiseParseError(
              r,
              'Can only put directly into symbols, not references'
            );
          }
          var o = null;
          var u = null;
          if (i) {
          } else {
            u = a.prop.value;
            o = a.root;
          }
          var s = {
            target: a,
            symbolWrite: i,
            value: t,
            args: [o, t],
            op: function (e, r, t) {
              if (i) {
                e[a.name] = t;
              } else {
                n.forEach(r, function (e) {
                  e[u] = t;
                });
              }
              return n.findNext(this, e);
            },
          };
          return s;
        }
      });
      C.addCommand('if', function (e, t, r) {
        if (r.matchToken('if')) {
          var n = e.requireElement('expression', r);
          r.matchToken('then');
          var a = e.parseElement('commandList', r);
          if (r.matchToken('else')) {
            var i = e.parseElement('commandList', r);
          }
          if (r.hasMore()) {
            r.requireToken('end');
          }
          var o = {
            expr: n,
            trueBranch: a,
            falseBranch: i,
            args: [n],
            op: function (e, r) {
              if (r) {
                return a;
              } else if (i) {
                return i;
              } else {
                return t.findNext(this, e);
              }
            },
          };
          e.setParent(a, o);
          e.setParent(i, o);
          return o;
        }
      });
      var a = function (e, r, a, t) {
        var n = r.currentToken();
        if (r.matchToken('for') || t) {
          var i = r.requireTokenType('IDENTIFIER');
          var o = i.value;
          r.requireToken('in');
          var u = e.requireElement('expression', r);
        } else if (r.matchToken('in')) {
          var o = 'it';
          var u = e.requireElement('expression', r);
        } else if (r.matchToken('while')) {
          var s = e.requireElement('expression', r);
        } else if (r.matchToken('until')) {
          var l = true;
          if (r.matchToken('event')) {
            var f = C.requireElement(
              'dotOrColonPath',
              r,
              'Expected event name'
            );
            if (r.matchToken('from')) {
              var c = e.requireElement('expression', r);
            }
          } else {
            var s = e.requireElement('expression', r);
          }
        } else if (r.matchTokenType('NUMBER')) {
          var m = parseFloat(n.value);
          r.requireToken('times');
        } else {
          r.matchToken('forever');
          var p = true;
        }
        if (r.matchToken('index')) {
          var i = r.requireTokenType('IDENTIFIER');
          var v = i.value;
        }
        var h = e.parseElement('commandList', r);
        if (r.hasMore()) {
          r.requireToken('end');
        }
        if (o == null) {
          o = '_implicit_repeat_' + n.start;
          var d = o;
        } else {
          var d = o + '_' + n.start;
        }
        var E = {
          identifier: o,
          indexIdentifier: v,
          slot: d,
          expression: u,
          forever: p,
          times: m,
          until: l,
          event: f,
          on: c,
          whileExpr: s,
          resolveNext: function () {
            return this;
          },
          loop: h,
          args: [s],
          op: function (e, r) {
            var t = e.meta.iterators[d];
            var n = false;
            if (this.forever) {
              n = true;
            } else if (this.until) {
              if (f) {
                n = e.meta.iterators[d].eventFired === false;
              } else {
                n = r !== true;
              }
            } else if (r) {
              n = true;
            } else if (m) {
              n = t.index < this.times;
            } else {
              n = t.value !== null && t.index < t.value.length;
            }
            if (n) {
              if (t.value) {
                e[o] = t.value[t.index];
                e.it = t.value[t.index];
              } else {
                e.it = t.index;
              }
              if (v) {
                e[v] = t.index;
              }
              t.index++;
              return h;
            } else {
              e.meta.iterators[d] = null;
              return a.findNext(this.parent, e);
            }
          },
        };
        e.setParent(h, E);
        var T = {
          name: 'repeatInit',
          args: [u, f, c],
          op: function (r, e, t, n) {
            r.meta.iterators[d] = { index: 0, value: e, eventFired: false };
            if (f) {
              var a = n || r.me;
              a.addEventListener(
                t,
                function (e) {
                  r.meta.iterators[d].eventFired = true;
                },
                { once: true }
              );
            }
            return E;
          },
          execute: function (e) {
            return a.unifiedExec(this, e);
          },
        };
        e.setParent(E, T);
        return T;
      };
      C.addCommand('repeat', function (e, r, t) {
        if (t.matchToken('repeat')) {
          return a(e, t, r, false);
        }
      });
      C.addCommand('for', function (e, r, t) {
        if (t.matchToken('for')) {
          return a(e, t, r, true);
        }
      });
      C.addCommand('transition', function (e, h, r) {
        if (r.matchToken('transition')) {
          if (r.matchToken('element') || r.matchToken('elements')) {
            var t = e.parseElement('expression', r);
          } else {
            var t = e.parseElement('implicitMeTarget');
          }
          var d = [];
          var n = [];
          var a = [];
          while (
            r.hasMore() &&
            !e.commandBoundary(r.currentToken()) &&
            r.currentToken().value !== 'using'
          ) {
            d.push(r.requireTokenType('IDENTIFIER').value);
            if (r.matchToken('from')) {
              n.push(e.requireElement('stringLike', r));
            } else {
              n.push(null);
            }
            r.requireToken('to');
            a.push(e.requireElement('stringLike', r));
          }
          if (r.matchToken('using')) {
            var i = e.requireElement('expression', r);
          }
          var o = {
            to: a,
            args: [t, n, a, i],
            op: function (e, r, m, p, v) {
              var t = [];
              h.forEach(r, function (c) {
                var e = new Promise(function (i, e) {
                  var o = c.style.transition;
                  c.style.transition =
                    v || _hyperscript.config.defaultTransition;
                  var u = h.getInternalData(c);
                  var r = getComputedStyle(c);
                  var t = {};
                  for (var n = 0; n < r.length; n++) {
                    var a = r[n];
                    var s = r[a];
                    t[a] = s;
                  }
                  if (!u.initalStyles) {
                    u.initalStyles = t;
                  }
                  for (var n = 0; n < d.length; n++) {
                    var l = d[n];
                    var f = m[n];
                    if (f == 'computed' || f == null) {
                      c.style[l] = t[l];
                    } else {
                      c.style[l] = f;
                    }
                  }
                  setTimeout(function () {
                    var e = [];
                    for (var r = 0; r < d.length; r++) {
                      var t = d[r];
                      var n = p[r];
                      if (n == 'initial') {
                        var a = u.initalStyles[t];
                        c.style[t] = a;
                      } else {
                        c.style[t] = n;
                      }
                    }
                    c.addEventListener(
                      'transitionend',
                      function () {
                        c.style.transition = o;
                        i();
                      },
                      { once: true }
                    );
                  }, 5);
                });
                t.push(e);
              });
              return Promise.all(t).then(function () {
                return h.findNext(o, e);
              });
            },
          };
          return o;
        }
      });
      C.addGrammarElement('stringLike', function (e, r, t) {
        return C.parseAnyOf(['string', 'nakedString'], t);
      });
      C.addCommand('fetch', function (e, i, r) {
        if (r.matchToken('fetch')) {
          var t = e.requireElement('stringLike', r);
          var n = e.parseElement('objectLiteral', r);
          var o = 'text';
          if (r.matchToken('as')) {
            if (r.matchToken('json')) {
              o = 'json';
            } else if (r.matchToken('response')) {
              o = 'response';
            } else if (r.matchToken('text')) {
            } else {
              e.raiseParseError(
                r,
                'Unknown response type: ' + r.currentToken()
              );
            }
          }
          var u = {
            url: t,
            argExrepssions: n,
            args: [t, n],
            op: function (n, e, a) {
              return new Promise(function (r, t) {
                fetch(e, a)
                  .then(function (e) {
                    if (o === 'response') {
                      n.it = e;
                      r(i.findNext(u, n));
                    } else if (o === 'json') {
                      e.json().then(function (e) {
                        n.it = e;
                        r(i.findNext(u, n));
                      });
                    } else {
                      e.text().then(function (e) {
                        n.it = e;
                        r(i.findNext(u, n));
                      });
                    }
                  })
                  .catch(function (e) {
                    i.triggerEvent(n.me, 'fetch:error', { reason: e });
                    t(e);
                  });
              });
            },
          };
          return u;
        }
      });
    }
    function e(e) {
      if (document.readyState !== 'loading') {
        e();
      } else {
        document.addEventListener('DOMContentLoaded', e);
      }
    }
    function i() {
      var e = document.querySelector('meta[name="htmx-config"]');
      if (e) {
        return r(e.content);
      } else {
        return null;
      }
    }
    function c() {
      var e = i();
      if (e) {
        _hyperscript.config = o(_hyperscript.config, e);
      }
    }
    if ('document' in S) {
      e(function () {
        c();
        F.processNode(document.body);
        document.addEventListener('htmx:load', function (e) {
          F.processNode(e.detail.elt);
        });
      });
    }
    return {
      internals: { lexer: L, parser: C, runtime: F },
      addFeature: function (e, r) {
        C.addFeature(e, r);
      },
      addCommand: function (e, r) {
        C.addCommand(e, r);
      },
      addLeafExpression: function (e, r) {
        C.addLeafExpression(r);
      },
      addIndirectExpression: function (e, r) {
        C.addIndirectExpression(r);
      },
      evaluate: function (e) {
        return F.evaluate(e);
      },
      processNode: function (e) {
        F.processNode(e);
      },
      config: {
        attributes: '_, script, data-script',
        defaultTransition: 'all 500ms ease-in',
        conversions: P,
      },
    };
  })();
});
